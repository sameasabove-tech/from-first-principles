import logging
import logging.handlers
import queue
from typing import Optional

class AsyncLoggingManager:
    _instance: Optional['AsyncLoggingManager'] = None
    _initialized = False

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if not self._initialized:
            self.queue = queue.Queue(-1)
            self.handler = logging.handlers.QueueHandler(self.queue)
            self.listener = None
            self._initialized = True

    def setup(self, handlers):
        if self.listener is not None:
            return

        root = logging.getLogger()
        if self.handler not in root.handlers:
            root.addHandler(self.handler)

        self.listener = logging.handlers.QueueListener(
            self.queue,
            *handlers,
            respect_handler_level=True
        )
        self.listener.start()

    def stop(self):
        if self.listener:
            self.listener.stop()
            self.listener = None
